# 制約条件を記述する constraints, route_ts, page_tsx
constraints = """
コンポーネントの200行程度のコード出力
3つのバックティックによるプログラム部分の記載と確実な閉じ
Tailwind CSSを使用したプロフェッショナルで使いやすいデザイン意識
ダイナミックで動的なGoogleカレンダー連携ポモドーロタイマーwebアプリケーション作成
画像相当箇所への仮ボックス挿入
1ファイル1export、別ファイル内容の記載回避、importによるコンポーネント呼び出し
呼び出し例の記載回避
デフォルトエクスポートされたコンポーネントの中括弧不使用での直接インポート
ユーザーインターフェース（タイマー設定、タスク管理、カレンダー連携など）の考慮
Googleカレンダーとの同期機能（タスクの自動インポート/エクスポート）の実装
完了したポモドーロセッションのカレンダーへの自動記録機能の実装
タスクの優先順位付けと進捗管理機能の実装
カスタマイズ可能な作業/休憩時間設定機能の実装
日次/週次/月次の生産性レポート生成機能の実装
モバイルデバイスとデスクトップの両方に対応したレスポンシブデザインの実装
Next.js 13 App Routerの機能最大活用とパフォーマンス・SEO考慮
Supabaseを使用したデータ取得と更新
TypeScriptの適切な型定義によるコード安全性確保
Server ComponentsとClient Componentsの適切な使い分け
Client Componentsでのuse clientディレクティブ利用
lucide-reactを使用したポモドーロタイマーシステムに適したアイコン選択
画面表示文字の日本語化
エラーのUI上での赤色表示
"""

page_tsx = """
page.tsxではデータを直接取得せず、コンポーネント内で完結するようにしてください。
hooksもこの中で完結してください。
必要なデータは仮のデータとしてファイル内に記述してください。
将来的にAPIからデータを取得する場合は、コンポーネント内でフェッチロジックを実装してください。
これにより、サーバーサイドでのデータフェッチングとセキュリティの向上が実現できます。
'use client'を使用してください
useEffectを使用した仮想データ（ファイル内に記述する）で実装
import Sidebar from '@/components/Sidebar'; 以外絶対に呼び出さないこと。
@/components/ などは絶対に呼び出さないこと
lucide-reactを使用してアイコンを表示する際は以下のみ利用
import { 
  Home, Calendar, Activity, Clock, 
  CheckSquare, Settings, Menu, X 
} from 'lucide-react'
できる限り画像URLを使用
https://picsum.photos
"""

route_ts = """
app routerに従って書いてください。
すでにマイグレーション済みのコードを使用してください。
Googleカレンダー連携のためのAPI routeを考慮してください。
ポモドーロタイマーの状態管理とセッション記録のためのルートを実装してください。
"""